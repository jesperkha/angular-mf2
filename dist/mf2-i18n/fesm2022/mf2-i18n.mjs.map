{"version":3,"file":"mf2-i18n.mjs","sources":["../../../src/types.ts","../../../src/mf2.ts","../../../src/store.ts","../../../src/service.ts","../../../src/pipe.ts","../../../src/providers.ts","../../../src/mf2-i18n.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nexport type Catalogs = Record<string, Record<string, string>>;\n\nexport interface I18nConfig {\n  defaultLocale: string;\n  catalogs: Catalogs;\n}\n\nexport const I18N_CONFIG = new InjectionToken<I18nConfig>('I18N_CONFIG');\n","import { MessageFormat, type MessageMarkupPart, type MessagePart } from \"messageformat\";\nimport sanitizeHtml from \"sanitize-html\";\n\nexport type BaseTranslation = Record<string, string>;\nexport type BaseArguments = Record<string, any>;\n\ntype TranslationGroup<T extends BaseTranslation> = {\n  defaultLocale: string;\n  locales: Record<string, T>;\n};\n\ntype Result<T, E> = { ok: true; value: T } | { ok: false; error: E };\n\nexport function newGroup<T extends BaseTranslation>(\n  defaultLocale: string,\n  locales: Record<string, T>\n): TranslationGroup<T> {\n  if (Object.keys(locales).length === 0) {\n    throw new Error(\"newGroup: locales object must not be empty\");\n  }\n\n  return {\n    defaultLocale,\n    locales,\n  };\n}\n\nexport function generate<T extends BaseTranslation, A extends BaseArguments>(\n  locale: string,\n  group: TranslationGroup<T>,\n  args: A\n): Result<T, string> {\n  // Fallback to default if requested locale is missing\n  if (!(locale in group.locales)) {\n    locale = group.defaultLocale;\n\n    if (!(locale in group.locales)) {\n      return { ok: false, error: \"group has no valid locales\" };\n    }\n  }\n\n  const translation = group.locales[locale];\n  const formatted = mf2Format(locale, translation, args);\n\n  return { ok: true, value: formatted as T };\n}\n\nfunction mf2Format<T extends BaseTranslation, A extends BaseArguments>(locale: string, t: T, a: A): T {\n  const result: Record<string, string> = {};\n\n  for (const key in t) {\n    if (!Object.prototype.hasOwnProperty.call(t, key)) continue;\n\n    const raw = t[key];\n    const mf2 = new MessageFormat(locale, raw);\n    const parts = mf2.formatToParts(a);\n    const formatted = partsToHtml(parts);\n\n    result[key] = sanitizeHtml(formatted, {\n      allowedTags: [\"b\", \"i\", \"a\", \"span\"], // Only allow tags used by mf2\n      allowedAttributes: {},\n      disallowedTagsMode: \"escape\",\n    });\n  }\n\n  return result as T;\n}\n\nfunction partsToHtml(parts: MessagePart<never>[]): string {\n  const result = [];\n\n  for (const part of parts) {\n    switch (part.type) {\n      case \"text\":\n      case \"string\":\n        result.push(part.value);\n        break;\n\n      case \"markup\":\n        result.push(markupToHtml(part));\n        break;\n    }\n  }\n\n  return result.join(\"\");\n}\n\nfunction markupToHtml(part: MessageMarkupPart): string {\n  const name = part.name?.trim().toLowerCase();\n\n  switch (name) {\n    case \"bold\":\n      return part.kind === \"open\" ? \"<b>\" : \"</b>\";\n    case \"italic\":\n      return part.kind === \"open\" ? \"<i>\" : \"</i>\";\n    case \"error\":\n      return part.kind === \"open\" ? `<span style=\"color:red\">` : \"</span>\";\n    case \"link\":\n      if (part.options) {\n        return `<a href=\"${(part.options as any)['to']}\">`;\n      }\n      return part.kind === \"open\" ? `<a style=\"text-decoration: underline\">` : \"</a>\";\n    default:\n      return \"\";\n  }\n}\n","// i18n.store.ts\nimport { Injectable, Inject } from '@angular/core';\nimport { I18N_CONFIG, I18nConfig } from './types';\nimport { newGroup, generate } from './mf2';\n\n/**\n * I18nStore\n * - Holds the current locale\n * - Builds one MF2 group from in-memory typed catalogs\n * - Formats a single key, returning the engine-sanitized string\n */\n@Injectable({ providedIn: 'root' })\nexport class I18nStore {\n  /** Current language */\n  activeLocale: string;\n\n  /** Compiled MF2 group */\n  private group: unknown;\n\n  constructor(@Inject(I18N_CONFIG) private readonly config: I18nConfig) {\n    this.activeLocale = config.defaultLocale;\n    // catalogs is a map like { en, no } where each is a `Translation`\n    this.group = newGroup(this.activeLocale, this.config.catalogs as any);\n  }\n\n  /** Switch the language if we have it */\n  setLocale(locale: string): void {\n    if (this.config.catalogs[locale]) {\n      this.activeLocale = locale;\n    } else {\n      console.warn(`[i18n] Unsupported locale \"${locale}\" — staying on ${this.activeLocale}`);\n    }\n  }\n\n  /**\n   * Resolve a single key through MF2.\n   * Engine returns sanitized HTML/plain string for each key; we pick the one requested.\n   */\n  format(key: string, args?: Record<string, unknown>): string | undefined {\n    const res = generate(this.activeLocale, this.group as any, args ?? {});\n    if (!res?.ok) return undefined;\n    const out = (res.value as Record<string, unknown>)[key];\n    return typeof out === 'string' ? out : String(out ?? '');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { I18nStore } from './store';\n\n//not really doing anything now, but should take some weigth from store later\n@Injectable({ providedIn: 'root' })\nexport class I18nService {\n  constructor(private readonly store: I18nStore) { }\n\n  t(key: string, args?: Record<string, unknown>): string {\n    return this.store.format(key, args) ?? `âŸ¨${key}âŸ©`;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { I18nService } from './service';\nimport { I18nStore } from './store';\n\n@Pipe({\n  name: 'i18n',\n  standalone: true,\n  pure: true,\n})\nexport class I18nPipe implements PipeTransform {\n  constructor(\n    private readonly svc: I18nService,\n    private readonly store: I18nStore,\n  ) { }\n\n  transform(key: string, args?: Record<string, unknown>): string {\n    // touch the locale so Angular re-evaluates when it changes\n    void this.store.activeLocale;\n    return this.svc.t(key, args);\n  }\n}\n","// providers.ts\nimport { Provider } from '@angular/core';\nimport { I18N_CONFIG, I18nConfig } from './types';\n\nexport function provideI18n(config: I18nConfig): Provider[] {\n  return [\n    { provide: I18N_CONFIG, useValue: config }\n  ];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1.I18nStore","i1.I18nService","i2.I18nStore"],"mappings":"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"}