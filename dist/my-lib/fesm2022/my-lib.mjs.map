{"version":3,"file":"my-lib.mjs","sources":["../../../projects/my-lib/src/lib/logger.ts","../../../projects/my-lib/src/lib/pipe.ts","../../../projects/my-lib/src/lib/types.ts","../../../projects/my-lib/src/lib/mf2.ts","../../../projects/my-lib/src/lib/store.ts","../../../projects/my-lib/src/public-api.ts","../../../projects/my-lib/src/my-lib.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Logger {\n  logs: string[] = []; // capture logs for testing\n\n  log(message: string): string {\n    this.logs.push(message);\n    console.log(message);\n    return message\n  }\n}\n","import { EnvironmentInjector, Pipe, PipeTransform, inject } from '@angular/core';\nimport { generate, newGroup } from './mf2';\nimport { I18nStore } from './store';\nimport { Logger } from './logger'\n\n@Pipe({\n  name: 'i18n',\n  standalone: true,\n  pure: true,\n})\nexport class I18nPipe implements PipeTransform {\n  private logger = inject(Logger)\n\n\n  // transform(key: string, args?: Record<string, unknown>): string {\n  //   return this.store.format(key, args);\n  // }\n\n  transform(key: string, args?: Record<string, unknown>): string {\n    return this.logger.log(\"TESTS\")\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport type Catalogs = Record<string, Record<string, string>>; // { 'en': Translation, 'no': Translation }\n\nexport interface I18nConfig {\n  defaultLocale: string;\n  catalogs: Catalogs; // youâ€™ll pass { en, no } here\n};\n\n// export const I18N_CONFIG: InjectionToken<I18nConfig> = new InjectionToken<I18nConfig>(\n//   'i18n.config'\n// );\n\nexport const i18nConfig: I18nConfig = {\n  defaultLocale: 'en',\n  catalogs: {\n    en: {\n      hello: 'Hello, {$name}!',\n    },\n    no: {\n      hello: 'Hallo, {$name}!',\n    },\n  }, // TODO:\n  // en: () => import('./locales/en.json').then((m) => m.default),\n};\n","import { MessageFormat, type MessageMarkupPart, type MessagePart } from 'messageformat';\nimport sanitizeHtml from 'sanitize-html';\n\nexport type BaseTranslation = Record<string, string>;\nexport type BaseArguments = Record<string, any>;\n\ntype TranslationGroup<T extends BaseTranslation> = {\n  defaultLocale: string;\n  locales: Record<string, T>;\n};\n\ntype Result<T, E> = { ok: true; value: T } | { ok: false; error: E };\n\nexport function newGroup<T extends BaseTranslation>(\n  defaultLocale: string,\n  locales: Record<string, T>\n): TranslationGroup<T> {\n  if (Object.keys(locales).length === 0) {\n    throw new Error('newGroup: locales object must not be empty');\n  }\n\n  return {\n    defaultLocale,\n    locales,\n  };\n}\n\nexport function generate<T extends BaseTranslation, A extends BaseArguments>(\n  locale: string,\n  group: TranslationGroup<T>,\n  args: A\n): Result<T, string> {\n  // Fallback to default if requested locale is missing\n  if (!(locale in group.locales)) {\n    locale = group.defaultLocale;\n\n    if (!(locale in group.locales)) {\n      return { ok: false, error: 'group has no valid locales' };\n    }\n  }\n\n  const translation = group.locales[locale];\n  const formatted = mf2Format(locale, translation, args);\n\n  return { ok: true, value: formatted as T };\n}\n\nfunction mf2Format<T extends BaseTranslation, A extends BaseArguments>(\n  locale: string,\n  t: T,\n  a: A\n): T {\n  const result: Record<string, string> = {};\n\n  for (const key in t) {\n    if (!Object.prototype.hasOwnProperty.call(t, key)) continue;\n\n    const raw = t[key];\n    const mf2 = new MessageFormat(locale, raw);\n    const parts = mf2.formatToParts(a);\n    const formatted = partsToHtml(parts);\n\n    result[key] = sanitizeHtml(formatted, {\n      allowedTags: ['b', 'i', 'a', 'span'], // Only allow tags used by mf2\n      allowedAttributes: {},\n      disallowedTagsMode: 'escape',\n    });\n  }\n\n  return result as T;\n}\n\nfunction partsToHtml(parts: MessagePart<never>[]): string {\n  const result = [];\n\n  for (const part of parts) {\n    switch (part.type) {\n      case 'text':\n      case 'string':\n        result.push(part.value);\n        break;\n\n      case 'markup':\n        result.push(markupToHtml(part));\n        break;\n    }\n  }\n\n  return result.join('');\n}\n\nfunction markupToHtml(part: MessageMarkupPart): string {\n  const name = part.name?.trim().toLowerCase();\n\n  switch (name) {\n    case 'bold':\n      return part.kind === 'open' ? '<b>' : '</b>';\n    case 'italic':\n      return part.kind === 'open' ? '<i>' : '</i>';\n    case 'error':\n      return part.kind === 'open' ? `<span style=\"color:red\">` : '</span>';\n    case 'link':\n      if (part.options) {\n        return `<a href=\"${(part.options as any)['to']}\">`;\n      }\n      return part.kind === 'open' ? `<a style=\"text-decoration: underline\">` : '</a>';\n    default:\n      return '';\n  }\n}\n","import { Catalogs, i18nConfig, I18nConfig } from './types';\nimport { generate, newGroup } from './mf2';\nimport { Inject, Injectable } from '@angular/core';\n\nexport class I18nStore {\n  private locale: string;\n  private defaultLocale: string;\n  private catalogs: Catalogs;\n  constructor() {\n    const config = i18nConfig; // TODO: inject\n\n    this.defaultLocale = config.defaultLocale;\n    this.locale = this.defaultLocale;\n    this.catalogs = config.catalogs;\n  }\n\n  setLocale(locale: string) {\n    this.locale = locale;\n  }\n\n  getLocale(): string {\n    return this.locale;\n  }\n\n  format(key: string, args?: Record<string, unknown>): string {\n    const group = newGroup(this.getLocale(), this.catalogs || {});\n    const res = generate(this.getLocale(), group as any, args ?? {});\n    if (!res?.ok) return '';\n    const out = (res.value as Record<string, unknown>)[key];\n    return typeof out === 'string' ? out : String(out ?? '');\n  }\n}\n","/*\n * Public API Surface of my-lib\n */\n\nexport * from './lib/pipe';\nexport * from './lib/store';\nexport * from './lib/types';\nexport * from './lib/logger';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}